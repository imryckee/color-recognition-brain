{"version":3,"sources":["components/Logo/brain.png","components/particlesOption.js","components/Navigation.js","components/Logo/Logo.js","components/Rank.js","components/ImageLinkForm/ImageLinkForm.js","components/ColorRecognition/ColorBlock.js","components/ColorRecognition/ColorRecognition.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","particlesOption","Navigation","style","display","justifyContent","className","Logo","options","max","height","width","alt","src","brain","Rank","ImageLinkForm","onInputChange","onButtonSubmit","onUpload","type","onChange","onClick","htmlFor","accept","id","ColorBlock","hex","name","percent","textcolor","TEXTColor","findTextColor","backgroundColor","color","ColorRecognition","link","colors","status","colorBlockList","map","colorinfo","key","app","Clarifai","App","apiKey","abstractColorInfo","response","outputs","data","raw_hex","w3c","Number","value","toFixed","sort","a","b","substr","length","event","setState","input","target","models","predict","state","then","catch","file","files","reader","FileReader","onload","e","result","split","readAsDataURL","params","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,mC,kSCkB5BC,EAlBS,CACpB,UAAY,CACR,OAAS,CAAC,MAAQ,IAAI,QAAU,CAAC,QAAS,EAAK,WAAa,MAC5D,MAAQ,CAAC,MAAQ,WACjB,MAAQ,CAAC,KAAO,SAAS,OAAS,CAAC,MAAQ,EAAE,MAAQ,WAAW,QAAU,CAAC,SAAW,GAAG,MAAQ,CAAC,IAAM,iBAAiB,MAAQ,IAAI,OAAS,MAAM,QAAU,CAAC,MAAQ,EAAE,QAAS,EAAK,KAAO,CAAC,QAAS,EAAK,MAAQ,EAAE,YAAc,EAAE,MAAO,IAC9O,KAAO,CAAC,MAAQ,EAAE,QAAS,EAAK,KAAO,CAAC,QAAS,EAAM,MAAQ,EAAE,SAAW,GAAI,MAAO,IACvF,YAAc,CAAC,QAAS,EAAM,SAAW,IAAI,MAAQ,UAAU,QAAU,GAAI,MAAQ,GACrF,KAAO,CAAC,QAAS,EAAK,MAAQ,EAAE,UAAY,OAAO,QAAS,EAAK,UAAW,EAAM,SAAW,MAAM,QAAS,EAAM,QAAU,CAAC,QAAS,EAAM,QAAU,IAAI,QAAU,OAExK,cAAgB,CACZ,UAAY,SACZ,OAAS,CAAC,QAAU,CAAC,QAAS,EAAK,KAAO,UAAU,QAAU,CAAC,QAAS,EAAK,KAAO,WAAW,QAAS,GACxG,MAAQ,CAAC,KAAO,CAAC,SAAW,IAAI,YAAc,CAAC,QAAU,IAAI,OAAS,CAAC,SAAW,IAAI,KAAO,EAAE,SAAW,EAAE,QAAU,EAAE,MAAQ,GAAG,QAAU,CAAC,SAAW,IAAI,SAAW,IAAK,KAAO,CAAC,aAAe,GAAG,OAAS,CAAC,aAAe,KAEpO,eAAgB,G,iBCFLC,EAVI,WACf,OACI,yBAAKC,MAAO,CAACC,QAAQ,OAAOC,eAAe,aACvC,uBAAGC,UAAU,iCAAb,c,kCCaGC,G,MAZF,WACT,OACI,yBAAKD,UAAU,kBACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBE,QAAS,CAAEC,IAAM,IAAMN,MAAO,CAAEO,OAAQ,IAAKC,MAAO,MACpF,yBAAKL,UAAU,cACX,yBAAKM,IAAI,OAAOC,IAAKC,WCK1BC,EAdF,WACT,OACI,6BACI,yBAAKT,UAAU,gBACV,6BAEL,yBAAKA,UAAU,YACV,QCiBFU,G,MAvBO,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,cAAcC,EAA6B,EAA7BA,eAAeC,EAAc,EAAdA,SACjD,OACI,6BACI,uBAAGb,UAAU,gBACR,yEAEL,uBAAGA,UAAU,gBACR,mEAEL,yBAAKA,UAAU,cACX,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,qBAAqBc,KAAK,OAAOC,SAAUJ,IAC5D,4BAAQX,UAAU,sDAAsDgB,QAASJ,GAAjF,YAGR,6BACI,2BAAOZ,UAAU,0CAA0CiB,QAAQ,gBAAnE,eACA,2BAAOjB,UAAU,cAAcc,KAAK,OAAOI,OAAO,UAAUC,GAAG,eAAeJ,SAAUF,Q,yBCLzFO,EAVI,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,IAAIC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,QACpBC,EAAYC,IAAUC,cAAcL,GAC1C,OACI,wBAAIrB,UAAU,cAAcH,MAAO,CAAC8B,gBAAiBN,EAAIjB,OAAO,OAAOwB,MAAMJ,IACzE,yBAAKxB,UAAU,cAAa,gCAASsB,GAArC,IAAqDD,GACrD,yBAAKrB,UAAU,iBAAiBuB,KCmB7BM,EA1BU,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAKC,EAAmB,EAAnBA,OAAOC,EAAY,EAAZA,OACnC,GAAY,IAATA,EAAW,CACV,IAAMC,EAAiBF,EAAOG,KAAI,SAAAC,GAC9B,OAAO,kBAAC,EAAD,CAAYd,IAAKc,EAAUd,IAAKC,KAAMa,EAAUb,KAAMC,QAASY,EAAUZ,QAASa,IAAKD,EAAUd,SAE5G,OACI,yBAAKrB,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKO,IAAKuB,EAAMxB,IAAI,GAAGD,MAAM,WAEjC,6BAASL,UAAU,MAAMH,MAAO,CAACQ,MAAM,UACnC,wBAAIL,UAAU,OACTiC,KAKf,OAAY,IAATD,EACE,uBAAGhC,UAAU,UAAb,mCACO,IAATgC,EACE,uBAAGhC,UAAU,UAAb,gCAEA,MCbTqC,EAAM,IAAIC,IAASC,IAAI,CAACC,OAAQ,qCAgEvBD,E,YA7DX,aAAc,IAAD,8BACT,+CASJE,kBAAoB,SAACC,GACjB,IAAMX,EAASW,EAASC,QAAQ,GAAGC,KAAKb,OAAOG,KAAI,SAAAC,GAC/C,MAAO,CAACd,IAAIc,EAAUU,QAAQvB,KAAKa,EAAUW,IAAIxB,KAAKC,QAAQwB,OAAuB,IAAhBZ,EAAUa,OAAWC,QAAQ,GAAG,QAKzG,OAHAlB,EAAOmB,MAAK,SAASC,EAAEC,GACnB,OAAOA,EAAE7B,QAAQ8B,OAAO,EAAED,EAAE7B,QAAQ+B,OAAO,GAAGH,EAAE5B,QAAQ8B,OAAO,EAAEF,EAAE5B,QAAQ+B,OAAO,MAE/EvB,GAjBE,EAoBbpB,cAAgB,SAAC4C,GACb,EAAKC,SAAS,CAACC,MAAMF,EAAMG,OAAOV,SArBzB,EAwBbpC,eAAiB,WACbyB,EAAIsB,OACCC,QAAQ,mCAAoC,EAAKC,MAAMJ,OACvDK,MAAK,SAAApB,GAAQ,OAAI,EAAKc,SAAS,CAACzB,OAAO,EAAKU,kBAAkBC,QAC9DoB,MAAK,kBAAK,EAAKN,SAAS,CAAC1B,KAAM,EAAK+B,MAAMJ,WAC1CK,MAAK,kBAAM,EAAKN,SAAS,CAACxB,OAAO,OACjC+B,OAAM,kBAAM,EAAKP,SAAS,CAACxB,OAAO,QA9B9B,EAiCbnB,SAAW,SAAC0C,GACR,IAAMS,EAAOT,EAAMG,OAAOO,MAAM,GAC1BC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACbhC,EAAIsB,OACCC,QAAQ,mCAAoCS,EAAEX,OAAOY,OAAOC,MAAM,WAAW,IAC7ET,MAAK,SAAApB,GAAQ,OAAI,EAAKc,SAAS,CAACzB,OAAO,EAAKU,kBAAkBC,QAC9DoB,MAAK,kBAAK,EAAKN,SAAS,CAAC1B,KAAMuC,EAAEX,OAAOY,YACxCR,MAAK,kBAAM,EAAKN,SAAS,CAACxB,OAAO,OACjC+B,OAAM,kBAAM,EAAKP,SAAS,CAACxB,OAAO,QAE3CkC,EAAOM,cAAcR,IA1CrB,EAAKH,MAAQ,CACTJ,MAAM,GACN3B,KAAK,GACLE,QAAQ,EACRD,OAAO,CAAC,CAACV,IAAI,GAAGC,KAAK,GAAGC,QAAQ,MAN3B,E,sEAgDT,OACI,yBAAKvB,UAAU,OACX,kBAAC,IAAD,CAAWA,UAAU,YAAYyE,OAAQ9E,IACzC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAegB,cAAe+D,KAAK/D,cAAeC,eAAgB8D,KAAK9D,eAAgBC,SAAU6D,KAAK7D,WACtG,kBAAC,EAAD,CAAkBiB,KAAM4C,KAAKb,MAAM/B,KAAME,OAAQ0C,KAAKb,MAAM7B,OAAQD,OAAQ2C,KAAKb,MAAM9B,c,GAxDrF4C,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.277de252.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.8580a503.png\";","const particlesOption = {\r\n    \"particles\":{\r\n        \"number\":{\"value\":160,\"density\":{\"enable\":true,\"value_area\":800}},\r\n        \"color\":{\"value\":\"#ffffff\"},\r\n        \"shape\":{\"type\":\"circle\",\"stroke\":{\"width\":0,\"color\":\"#000000\"},\"polygon\":{\"nb_sides\":5},\"image\":{\"src\":\"img/github.svg\",\"width\":100,\"height\":100}},\"opacity\":{\"value\":1,\"random\":true,\"anim\":{\"enable\":true,\"speed\":1,\"opacity_min\":0,\"sync\":false}},\r\n        \"size\":{\"value\":3,\"random\":true,\"anim\":{\"enable\":false,\"speed\":4,\"size_min\":0.3,\"sync\":false}},\r\n        \"line_linked\":{\"enable\":false,\"distance\":150,\"color\":\"#ffffff\",\"opacity\":0.4,\"width\":1},\r\n        \"move\":{\"enable\":true,\"speed\":1,\"direction\":\"none\",\"random\":true,\"straight\":false,\"out_mode\":\"out\",\"bounce\":false,\"attract\":{\"enable\":false,\"rotateX\":600,\"rotateY\":600}}\r\n    },\r\n    \"interactivity\":{\r\n        \"detect_on\":\"canvas\",\r\n        \"events\":{\"onhover\":{\"enable\":true,\"mode\":\"bubble\"},\"onclick\":{\"enable\":true,\"mode\":\"repulse\"},\"resize\":true},\r\n        \"modes\":{\"grab\":{\"distance\":400,\"line_linked\":{\"opacity\":1}},\"bubble\":{\"distance\":250,\"size\":0,\"duration\":2,\"opacity\":0,\"speed\":3},\"repulse\":{\"distance\":400,\"duration\":0.4},\"push\":{\"particles_nb\":4},\"remove\":{\"particles_nb\":2}}\r\n    },\r\n    \"retina_detect\":true\r\n}\r\n        \r\n\r\nexport default particlesOption","import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return(\r\n        <nav style={{display:'flex',justifyContent:'flex-end'}}>\r\n            <p className='f3 link dim white pa3 pointer'>\r\n                Sign Out\r\n            </p>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation  ","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport brain from './brain.png';\r\nimport './Logo.css';\r\n \r\n\r\nconst Logo = () => {\r\n    return(\r\n        <div className='center ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 25 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner\"> \r\n                    <img alt='logo' src={brain} />\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo ","import React from 'react';\r\n\r\nconst Rank = () => {\r\n    return(\r\n        <div>\r\n            <div className='white f3 pa3'>\r\n                {'Eva, your current rank is'}\r\n            </div>\r\n            <div className='white f1'>\r\n                {'#1'}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rank","import React from 'react';\r\nimport './ImageLinkForm.css'\r\n\r\nconst ImageLinkForm = ({onInputChange,onButtonSubmit,onUpload}) => {\r\n    return(\r\n        <div>\r\n            <p className='f3 white pa3'>\r\n                {\"This Magic Brain will detect colors in your pictures. Give it a try !\"}\r\n            </p>\r\n            <p className='f5 white pa3'>\r\n                {\"Enter a valid image url or browse image files in your computer.\"}\r\n            </p>\r\n            <div className=\"pa2 center\">\r\n                <div className='center form pa4 br3 shadow-5'>\r\n                    <input className='f4 pa2 w-70 center' type='text' onChange={onInputChange}/>\r\n                    <button className='w-30 grow f5 link ph2 pv2 dib white bg-light-purple' onClick={onButtonSubmit}>Detect</button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <label className='w-20 center upload-button pa2 bg-silver' htmlFor='image-button'>Browse File</label>\r\n                <input className='icon-button' type='file' accept=\"image/*\" id='image-button' onChange={onUpload}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm","import React from 'react';\r\nimport './ColorBlock.css'\r\nimport TEXTColor from 'textcolor'\r\n\r\n\r\nconst ColorBlock = ({hex,name,percent}) => {\r\n    const textcolor = TEXTColor.findTextColor(hex);\r\n    return(\r\n        <li className=\"color-block\" style={{backgroundColor: hex,height:'40px',color:textcolor}}>\r\n            <div className=\"color-info\"><strong>{name}</strong> {hex}</div>\r\n            <div className=\"color-percent\">{percent}</div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ColorBlock","import React from 'react';\r\nimport ColorBlock from './ColorBlock.js';\r\n\r\nconst ColorRecognition = ({link,colors,status}) => {\r\n    if(status===0){\r\n        const colorBlockList = colors.map(colorinfo => {\r\n            return <ColorBlock hex={colorinfo.hex} name={colorinfo.name} percent={colorinfo.percent} key={colorinfo.hex}/>\r\n        })\r\n        return(\r\n            <div className='center mt3 mb3'>\r\n                <div className='pa2'>\r\n                    <img src={link} alt='' width='500px'/>\r\n                </div>\r\n                <section className='pa1' style={{width:\"500px\"}}>\r\n                    <ul className='pa1'>\r\n                        {colorBlockList}\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }else if(status===1){\r\n        return <p className='red f3'>Please enter a valid image url.</p>\r\n    }else if(status===2){\r\n        return <p className='red f3'>Please choose an image file.</p>\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ColorRecognition","import React from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport particlesOption from '../components/particlesOption.js'\nimport Clarifai from 'clarifai'\nimport Navigation from '../components/Navigation.js'\nimport Logo from '../components/Logo/Logo.js'\nimport Rank from '../components/Rank.js'\nimport ImageLinkForm from '../components/ImageLinkForm/ImageLinkForm.js'\nimport ColorRecognition from '../components/ColorRecognition/ColorRecognition.js'\n\n\nconst app = new Clarifai.App({apiKey: '7a4d95ae63234c00b04756627ab81528'});\n\nclass App extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            input:\"\",\n            link:'', \n            status:-1,//beginning:-1,ok:0,invalid url:1,invalid file:2\n            colors:[{hex:'',name:'',percent:''}],\n        } \n    }\n\n    abstractColorInfo = (response) => {\n        const colors = response.outputs[0].data.colors.map(colorinfo =>{\n            return {hex:colorinfo.raw_hex,name:colorinfo.w3c.name,percent:Number(colorinfo.value*100).toFixed(1)+\"%\"}\n        });\n        colors.sort(function(a,b){\n            return b.percent.substr(0,b.percent.length-1)-a.percent.substr(0,a.percent.length-1)\n        })\n        return colors;\n    }\n\n    onInputChange = (event) =>{\n        this.setState({input:event.target.value})\n    }\n    \n    onButtonSubmit = () =>{\n        app.models\n            .predict(\"eeed0b6733a644cea07cf4c60f87ebb7\", this.state.input)\n            .then(response => this.setState({colors:this.abstractColorInfo(response)}))\n            .then(()=> this.setState({link: this.state.input}))\n            .then(() => this.setState({status:0}))\n            .catch(() => this.setState({status:1}))\n    }\n\n    onUpload = (event) => {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = (e) =>{\n            app.models\n                .predict(\"eeed0b6733a644cea07cf4c60f87ebb7\", e.target.result.split('base64,')[1])\n                .then(response => this.setState({colors:this.abstractColorInfo(response)}))\n                .then(()=> this.setState({link: e.target.result}))\n                .then(() => this.setState({status:0}))\n                .catch(() => this.setState({status:2}));\n        }\n        reader.readAsDataURL(file);\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <Particles className='particles' params={particlesOption} />\n                <Navigation />\n                <Logo />\n                <Rank />\n                <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} onUpload={this.onUpload}/>\n                <ColorRecognition link={this.state.link} status={this.state.status} colors={this.state.colors}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker.js';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}