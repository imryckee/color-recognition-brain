{"version":3,"sources":["components/Logo/brain.png","components/particlesOption.js","components/Navigation.js","components/Signin.js","components/Register.js","components/Logo/Logo.js","components/Rank.js","components/ImageLinkForm/ImageLinkForm.js","components/ColorRecognition/ColorBlock.js","components/ColorRecognition/ColorRecognition.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","particlesOption","Navigation","onRouteChange","onSigninStatusChange","isSignedIn","changeToInitialStatus","style","display","justifyContent","onClick","className","initialState","signInEmail","signInPassword","passwordWrong","noSuchUser","dbfailed","Signin","props","onEmailChange","event","setState","target","value","onPasswordChange","onSubmitSignIn","parentNode","firstChild","childNodes","lastChild","fetch","server","method","headers","body","JSON","stringify","email","state","password","then","response","json","data","loadUser","catch","err","console","log","id","htmlFor","onChange","this","type","name","React","Component","submissionFormat","emailExisted","Register","onNameChange","onSubmitRegister","Logo","options","max","height","width","alt","src","brain","Rank","entries","ImageLinkForm","onInputChange","onSubmitDetect","onUpload","placeholder","accept","ColorBlock","hex","percent","textcolor","TEXTColor","findTextColor","backgroundColor","color","ColorRecognition","link","colors","linkstatus","colorBlockList","map","colorinfo","key","app","Clarifai","App","apiKey","process","REACT_APP_serverPORT","input","route","user","parseInt","updateEntries","abstractColorInfo","outputs","raw_hex","w3c","Number","toFixed","sort","a","b","substr","length","models","predict","reader","FileReader","onload","e","result","split","file","files","readAsDataURL","params","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.662668fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.8580a503.png\";","const particlesOption = {\r\n    \"particles\":{\r\n        \"number\":{\"value\":160,\"density\":{\"enable\":true,\"value_area\":800}},\r\n        \"color\":{\"value\":\"#ffffff\"},\r\n        \"shape\":{\"type\":\"circle\",\"stroke\":{\"width\":0,\"color\":\"#000000\"},\"polygon\":{\"nb_sides\":5},\"image\":{\"src\":\"img/github.svg\",\"width\":100,\"height\":100}},\"opacity\":{\"value\":1,\"random\":true,\"anim\":{\"enable\":true,\"speed\":1,\"opacity_min\":0,\"sync\":false}},\r\n        \"size\":{\"value\":3,\"random\":true,\"anim\":{\"enable\":false,\"speed\":4,\"size_min\":0.3,\"sync\":false}},\r\n        \"line_linked\":{\"enable\":false,\"distance\":150,\"color\":\"#ffffff\",\"opacity\":0.4,\"width\":1},\r\n        \"move\":{\"enable\":true,\"speed\":1,\"direction\":\"none\",\"random\":true,\"straight\":false,\"out_mode\":\"out\",\"bounce\":false,\"attract\":{\"enable\":false,\"rotateX\":600,\"rotateY\":600}}\r\n    },\r\n    \"interactivity\":{\r\n        \"detect_on\":\"canvas\",\r\n        \"events\":{\"onhover\":{\"enable\":true,\"mode\":\"bubble\"},\"onclick\":{\"enable\":true,\"mode\":\"repulse\"},\"resize\":true},\r\n        \"modes\":{\"grab\":{\"distance\":400,\"line_linked\":{\"opacity\":1}},\"bubble\":{\"distance\":250,\"size\":0,\"duration\":2,\"opacity\":0,\"speed\":3},\"repulse\":{\"distance\":400,\"duration\":0.4},\"push\":{\"particles_nb\":4},\"remove\":{\"particles_nb\":2}}\r\n    },\r\n    \"retina_detect\":true\r\n}\r\n        \r\n\r\nexport default particlesOption","import React from 'react';\r\n\r\nconst Navigation = ({onRouteChange,onSigninStatusChange,isSignedIn,changeToInitialStatus}) => {\r\n    if(isSignedIn){\r\n        return(\r\n            <nav style={{display:'flex',justifyContent:'flex-end'}}>\r\n                <p onClick={()=>{onRouteChange('home');onSigninStatusChange(false);changeToInitialStatus()}} className='f4 link dim white pa3 pointer underline'>Sign Out</p>\r\n            </nav>\r\n        )\r\n    }else{\r\n        return(\r\n            <nav style={{display:'flex',justifyContent:'space-between'}}>\r\n                <p onClick={()=>{onRouteChange('home');changeToInitialStatus()}} className='f4 link dim white pa3 pointer underline'>Home Page</p>\r\n                <div style={{display:'flex',justifyContent:'flex-end'}}>\r\n                    <p onClick={()=>{onRouteChange('signin');}} className='f4 link dim white pa3 pointer underline'>Sign In</p>\r\n                    <p onClick={()=>{onRouteChange('register');}} className='f4 link dim white pa3 pointer underline '>Register</p>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\n\r\nconst initialState = {\r\n    signInEmail:\"\",\r\n    signInPassword:'',\r\n    passwordWrong:\"\",\r\n    noSuchUser:\"\",\r\n    dbfailed:\"\",\r\n} \r\n\r\nclass Signin extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = initialState;\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n        this.setState({signInEmail:event.target.value})\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState({signInPassword:event.target.value})\r\n    }\r\n\r\n    onSubmitSignIn = (event) => {\r\n        event.target.parentNode.parentNode.firstChild.childNodes[1].lastChild.value=\"\";\r\n        event.target.parentNode.parentNode.firstChild.childNodes[2].lastChild.value=\"\";\r\n\r\n        fetch(this.props.server+\"/signin\",{\r\n            method:'post',\r\n            headers:{'Content-type':'application/json'},\r\n            body:JSON.stringify({\r\n                email:this.state.signInEmail,\r\n                password:this.state.signInPassword\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState(\r\n                ()=>(initialState)\r\n            );\r\n            if(data==='wrong password'){\r\n                this.setState(\r\n                    ()=>({passwordWrong:true})\r\n                );\r\n            }else if(data==='no such user'){\r\n                this.setState(\r\n                    ()=>({noSuchUser:true})\r\n                );\r\n            }else if(data==='there is something wrong with database'){\r\n                this.setState(\r\n                    ()=>({dbfailed:true})\r\n                );\r\n            }else{\r\n                this.props.onSigninStatusChange(true);\r\n                this.props.loadUser(data);\r\n                this.props.changeToInitialStatus();\r\n                this.props.onRouteChange('home');\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(\"Can't connect to database.\");\r\n            this.setState(\r\n                ()=>({dbfailed:true})\r\n            );\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-30-l mw10 shadow-5 center\">\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"f3 fw6 ph0 mh0\">Sign In</legend>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                                <input\r\n                                    onChange={this.onEmailChange}\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                    type=\"email\" \r\n                                    name=\"email-address\"  \r\n                                    id=\"email-address\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"mv3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    onChange={this.onPasswordChange}\r\n                                    className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                    type=\"password\" \r\n                                    name=\"password\"  \r\n                                    id=\"password\"\r\n                                />\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"\">\r\n                            <input \r\n                                onClick={this.onSubmitSignIn} \r\n                                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                                type=\"submit\" \r\n                                value=\"Sign In\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {this.state.passwordWrong===true\r\n                        ?<p className=\"white\">Password is wrong.</p>\r\n                        :(this.state.noSuchUser===true\r\n                            ?<p className=\"white\">No such user.</p>\r\n                            :(this.state.dbfailed===true\r\n                                ?<div className=\"white\">\r\n                                    <p>Can't connect to database.</p>\r\n                                    <p>Try it later.</p>\r\n                                </div>\r\n                                :<div></div>\r\n                            )\r\n                        )\r\n                    }\r\n                </main>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Signin","import React from 'react';\r\n\r\nconst initialState = {\r\n    name:'',\r\n    email:\"\",\r\n    password:'',\r\n    submissionFormat:\"\",\r\n    emailExisted:\"\",\r\n    dbfailed:\"\"\r\n}\r\n\r\nclass Register extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = initialState;\r\n    } \r\n \r\n    onNameChange = (event) => {\r\n        this.setState({name:event.target.value})\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n        this.setState({email:event.target.value})\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState({password:event.target.value})\r\n    }\r\n\r\n    onSubmitRegister = (event) => {\r\n        event.target.parentNode.parentNode.firstChild.childNodes[1].lastChild.value=\"\";\r\n        event.target.parentNode.parentNode.firstChild.childNodes[2].lastChild.value=\"\";\r\n        event.target.parentNode.parentNode.firstChild.childNodes[3].lastChild.value=\"\";\r\n\r\n        fetch(this.props.server+\"/register\",{\r\n            method:'post',\r\n            headers:{'Content-type':'application/json'},\r\n            body:JSON.stringify({\r\n                name:this.state.name,\r\n                email:this.state.email,\r\n                password:this.state.password\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState(\r\n                ()=>(initialState)\r\n            );\r\n            if(data===\"incorrect form submission\"){\r\n                this.setState(\r\n                    ()=>({submissionFormat:false})\r\n                );\r\n            }else if (data===\"email has existed\"){\r\n                this.setState(\r\n                    ()=>({emailExisted:true})\r\n                );\r\n            }else if (data===\"there is something wrong with database\"){\r\n                this.setState(\r\n                    ()=>({dbfailed:true})\r\n                );\r\n            }else{\r\n                this.props.onRouteChange('signin');\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(\"Can't connect to database.\");\r\n            this.setState(\r\n                ()=>({dbfailed:true})\r\n            );\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-30-l mw10 shadow-5 center\">\r\n                <main className=\"pl5 pr5 pt4 pb3 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"f3 fw6 ph0 mh0\">Register</legend>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                                <input\r\n                                    onChange={this.onNameChange}\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                    type=\"text\" \r\n                                    name=\"name\"  \r\n                                    id=\"name\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                                <input\r\n                                    onChange={this.onEmailChange}\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                    type=\"email\" \r\n                                    name=\"email-address\"  \r\n                                    id=\"email-address\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"mv3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    onChange={this.onPasswordChange}\r\n                                    className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                    type=\"password\" \r\n                                    name=\"password\"  \r\n                                    id=\"password\"\r\n                                />\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"\">\r\n                            <input \r\n                                onClick={this.onSubmitRegister}\r\n                                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                                type=\"submit\" \r\n                                value=\"Register\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {this.state.emailExisted===true\r\n                        ?<p className=\"white\">This email has existed.</p>\r\n                        :(this.state.submissionFormat===false\r\n                            ?<div className=\"white\">\r\n                                <p>Incorrect form submission.</p>\r\n                                <p>Follow the following rules.</p>\r\n                            </div>\r\n                            :(this.state.dbfailed===false\r\n                                ?<div className=\"white\">\r\n                                    <p>Can't connect to database.</p>\r\n                                    <p>Try it later.</p>\r\n                                </div>\r\n                                :<div></div>\r\n                            )\r\n                        )\r\n                    }\r\n                    <div>\r\n                        <p>Name shouldn't be empty.</p>\r\n                        <p>Email should be valid. </p>\r\n                        <p>Password should be greater than 6 digits.</p>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n        )\r\n    }\r\n}\r\nexport default Register","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport brain from './brain.png';\r\nimport './Logo.css';\r\n \r\n\r\nconst Logo = () => {\r\n    return(\r\n        <div className='center ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 25 }} style={{ height: 130, width: 130 }} >\r\n                <div className=\"Tilt-inner\"> \r\n                    <img alt='logo' src={brain} />\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo ","import React from 'react';\r\n\r\nconst Rank = ({isSignedIn,name,entries}) => {\r\n    if(isSignedIn===true){\r\n        return(\r\n            <div>\r\n                <div className='white f4 pa2'>\r\n                    {`${name}, your have detected ${entries} times for now.`}\r\n                </div>\r\n            </div>\r\n        )\r\n    }else{\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Rank","import React from 'react';\r\nimport './ImageLinkForm.css'\r\n\r\nconst ImageLinkForm = ({onInputChange,onSubmitDetect,onUpload}) => {\r\n    return(\r\n        <div>\r\n            <p className='f3 white pa2'>\r\n                {\"This Magic Brain will detect colors in your pictures. Give it a try !\"}\r\n            </p>\r\n            <div className=\"pa2 center\">\r\n                <div className='center form pa4 br3 shadow-5'>\r\n                    <input className='f4 pa2 w-70 center' type='text' placeholder ='Enter an image url' onChange={onInputChange}/>\r\n                    <button className='w-30 grow f5 link ph2 pv2 dib white bg-light-purple' onClick={onSubmitDetect}>Detect</button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <label className='w-20 center upload-button pa2 bg-light-silver mt4 mb4' htmlFor='image-button'>Upload Image</label>\r\n                <input className='icon-button' type='file' accept=\"image/*\" id='image-button' onChange={onUpload}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm","import React from 'react';\r\nimport './ColorBlock.css'\r\nimport TEXTColor from 'textcolor'\r\n\r\n\r\nconst ColorBlock = ({hex,name,percent}) => {\r\n    const textcolor = TEXTColor.findTextColor(hex);\r\n    return(\r\n        <li className=\"color-block\" style={{backgroundColor: hex,height:'40px',color:textcolor}}>\r\n            <div className=\"color-info\"><strong>{name}</strong> {hex}</div>\r\n            <div className=\"color-percent\">{percent}</div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ColorBlock","import React from 'react';\r\nimport ColorBlock from './ColorBlock.js';\r\n\r\nconst ColorRecognition = ({link,colors,linkstatus}) => {\r\n    if(linkstatus==='true'){\r\n        const colorBlockList = colors.map(colorinfo => {\r\n            return <ColorBlock hex={colorinfo.hex} name={colorinfo.name} percent={colorinfo.percent} key={colorinfo.hex}/>\r\n        })\r\n        return(\r\n            <div className='center mt3 mb3'>\r\n                <div className='pa2'>\r\n                    <img src={link} alt='' width='500px'/>\r\n                </div>\r\n                <section className='pa1' style={{width:\"500px\"}}>\r\n                    <ul className='pa1'>\r\n                        {colorBlockList}\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }else if(linkstatus==='invalidUrl'){\r\n        return <div>\r\n                    <p className='light-red f3'>This isn't a valid image url. Please enter again.</p>\r\n                    <p className='gold f4'>Or you tried it too fast, slow down !</p>\r\n                </div>\r\n    }else if(linkstatus==='invalidFile'){\r\n        return <div>\r\n                    <p className='light-red f3'>This isn't an image file. Please upload again.</p>\r\n                    <p className='gold f4'>Or you tried it too fast, slow down !</p>\r\n                </div>\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ColorRecognition","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Particles from 'react-particles-js';\r\nimport particlesOption from '../components/particlesOption.js'\r\n\r\nimport Clarifai from 'clarifai'\r\n\r\nimport Navigation from '../components/Navigation.js'\r\nimport Signin from '../components/Signin.js'\r\nimport Register from '../components/Register.js'\r\nimport Logo from '../components/Logo/Logo.js'\r\nimport Rank from '../components/Rank.js'\r\nimport ImageLinkForm from '../components/ImageLinkForm/ImageLinkForm.js'\r\nimport ColorRecognition from '../components/ColorRecognition/ColorRecognition.js'\r\n\r\nconst app = new Clarifai.App({apiKey: '7a4d95ae63234c00b04756627ab81528'});\r\nconst server = \"http://localhost:\" + process.env.REACT_APP_serverPORT;\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            input:\"\",\r\n            link:'', \r\n            colors:[{hex:'',name:'',percent:''}],\r\n            linkstatus:'',//'true','invalidUrl','invalidFile'\r\n\r\n            route:'home',//'home','signin','register'\r\n            isSignedIn:false,//true\r\n            user:{\r\n                id:-1,\r\n                name:'',\r\n                entries:0\r\n            }\r\n        } \r\n    }\r\n\r\n    changeToInitialStatus= () => {\r\n        this.setState({\r\n            input:\"\",\r\n            link:'',\r\n            colors:[{hex:'',name:'',percent:''}],\r\n            linkstatus:''\r\n        })\r\n    }\r\n\r\n    onRouteChange = (route) => {\r\n        this.setState({route:route})\r\n    }\r\n\r\n    onSigninStatusChange = (isSignedIn) =>{\r\n        this.setState({isSignedIn:isSignedIn})\r\n    }\r\n\r\n    loadUser = (data) => {\r\n        this.setState({\r\n            user:{\r\n                id:data.id,\r\n                name:data.name,\r\n                entries:parseInt(data.entries)\r\n            }\r\n        })\r\n    }\r\n\r\n    updateEntries = () => {\r\n        if(this.state.isSignedIn){\r\n            fetch(server+\"/image\",{\r\n                method:'put',\r\n                headers:{'Content-type':'application/json'},\r\n                body:JSON.stringify({\r\n                    id:this.state.user.id\r\n                })\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if(data==='no such user' || data==='update entries failed'){\r\n                    console.log(\"There is something wrong with the user info. Update entries failed.\")\r\n                }else{\r\n                    this.setState({\r\n                        user:{\r\n                            ...this.state.user,\r\n                            entries:data\r\n                        }\r\n                    })\r\n                    // this.setState(Object.assign(this.state.user,{entries:data}))\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(\"Update entries failed. May be there is something wrong with database.\");\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n    \r\n    abstractColorInfo = (response) => {\r\n        const colors = response.outputs[0].data.colors.map(colorinfo =>{\r\n            return {hex:colorinfo.raw_hex,name:colorinfo.w3c.name,percent:Number(colorinfo.value*100).toFixed(1)+\"%\"}\r\n        });\r\n        colors.sort(function(a,b){\r\n            return b.percent.substr(0,b.percent.length-1)-a.percent.substr(0,a.percent.length-1)\r\n        })\r\n        return colors;\r\n    }\r\n\r\n    onInputChange = (event) =>{\r\n        this.setState({input:event.target.value})\r\n    }\r\n\r\n    onSubmitDetect = (event) =>{\r\n        event.target.parentNode.firstChild.value='';\r\n        console.log(\"current:\"+this.state.input);\r\n        app.models\r\n            .predict(\"eeed0b6733a644cea07cf4c60f87ebb7\", this.state.input)\r\n            .then(response => this.setState({colors:this.abstractColorInfo(response)}))\r\n            .then(()=>{\r\n                console.log(\"current input:\"+this.state.input);\r\n                console.log(\"current link:\"+this.state.link);\r\n            })\r\n            .then(this.setState(\r\n                ()=>({\r\n                    input:'',\r\n                    link:this.state.input,\r\n                    linkstatus:'true',\r\n                    })\r\n            ))\r\n            .then(()=>{\r\n                console.log(\"after input:\"+this.state.input);\r\n                console.log(\"after link:\"+this.state.link);\r\n            })\r\n            .then(()=>{this.updateEntries()})\r\n            .catch(() => {\r\n                console.log(\"afterwards:\"+this.state.input);\r\n                this.setState({linkstatus:'invalidUrl'});})\r\n    }\r\n\r\n    onUpload = (event) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) =>{\r\n            app.models\r\n                .predict(\"eeed0b6733a644cea07cf4c60f87ebb7\", e.target.result.split('base64,')[1])\r\n                .then(response => this.setState({colors:this.abstractColorInfo(response)}))\r\n                .then(this.setState(\r\n                    ()=>({\r\n                        link: e.target.result,\r\n                        linkstatus:'true',\r\n                    })\r\n                ))\r\n                .then(()=>{this.updateEntries()})\r\n                .catch(() => this.setState({linkstatus:'invalidFile'}));\r\n        }\r\n        const file = event.target.files[0];\r\n        if(file){\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n                <Particles className='particles' params={particlesOption} />\r\n                <Navigation \r\n                    onRouteChange={this.onRouteChange} \r\n                    onSigninStatusChange={this.onSigninStatusChange} \r\n                    isSignedIn={this.state.isSignedIn} \r\n                    changeToInitialStatus={this.changeToInitialStatus}\r\n                />\r\n                {this.state.route==='home'\r\n                    ?<div>\r\n                        <Logo />\r\n                        <Rank isSignedIn={this.state.isSignedIn} name={this.state.user.name} entries={this.state.user.entries}/>\r\n                        <ImageLinkForm onInputChange={this.onInputChange} onSubmitDetect={this.onSubmitDetect} onUpload={this.onUpload}/>\r\n                        <ColorRecognition link={this.state.link} linkstatus={this.state.linkstatus} colors={this.state.colors}/>\r\n                    </div>\r\n                    :(\r\n                        this.state.route ===\"signin\"\r\n                        ?<Signin \r\n                            onRouteChange={this.onRouteChange} \r\n                            onSigninStatusChange={this.onSigninStatusChange} \r\n                            loadUser={this.loadUser}\r\n                            changeToInitialStatus={this.changeToInitialStatus}\r\n                            server={server}\r\n                        /> \r\n                        :(\r\n                            this.state.route === 'register'\r\n                            ?<Register onRouteChange={this.onRouteChange} server={server}/> \r\n                            :<div></div>\r\n                        )\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker.js';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}